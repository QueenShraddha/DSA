------Stacks------

Stacks are data structures which follow last in first out (LIFO) algo for insertion and deletion

Its like a stack of books, you keep one book upon the other, and the newest book is on the top. Also while removing books, the topmost book(the book which was inserted at last) is removed first. Hence this is a stack of books.

IN coding, While using recursion, the memory is used as stack. 
As recursion can be transformed into iteration using loops, sometimes we need to use stack while converting recursion into iteration.

ADT of stack:
ADT contains the data representation and operations.
Data:
1. space for storing elements
2. top pointer(points at the topmost)

operations:
1. push(x) - inserting a value into the stack at the top
2. pop() - deletion/popping out the topmost element from the stack
3. peek(index) - looking at a value at a given position
4. stackTop() - checks the topmost value of the stack
5. isEmpty() - checks if the stack is empty 
6. isFull() - checks if stack is full 

How can we implement a stack? using linked lists or arrays

lec 232 
implementation of stack using arrays
We need a fixed size of the stack, say S=5
And a pointer top which points at the last element entered 
top at first points at index -1 of the array (ie, index -1 means that the pointer is not pointing any where in the array)

Where does insertion and deletion takes place? 
If we see an array, S[10|15|7| | ]
where do we insert?
if we insert at the position of 10, we will need to move all the elements by 1 index, which will mean that time taken will be O(n)
So if we insert at the end, ie, after 7, it will take time O(1), hence this process is better

code for defining a stack:

struct Stack{
    int size; //size of the stack
    int Top; //top pointer
    int *S; //array to be created dynamically
};

int main(){
    struct Stack st;
    printf("Enter the size of stack: ");
    scanf("%d",&st.size); //size of the stack
    st.S = new int[st.size];  //this is C++ code, use malloc for C
    st.Top = -1; //assigning index -1 (outside the array) to the stack
}


condition for stack empty : top=-1
so if there is no top in the stack, the stack is empty

condition for stack full : top = size-1

operations on a stack:

1. push(x)

initially top=-1 means that the stack is empty
we do top++, top moves to index 0. Now insert a value by: 
S[top]=x;

Now do top++ again and insert value again. Keep doing this until you need or until top==size-1

So before pushing, we need to check whether the stack has space for insertion or not
code:

void push(Stack *st, int x){
    if(st->Top==st->size-1) //checking if the stack is full or not
    {
        printf("Stack overflow");
    }else{
        st->Top++;
        st->S[st->Top]=x;
    }
}


2. pop()
when we pop the stack, a value is deleted from the array at the top position and the deleted value is printed or returned. We can delete until the stack is empty, and to check if the stack is empty or not, we will use top==-1
Hence before deletion we also have to check if the stack is empty or not

code:

int pop(stack *st){
    int x=-1;
    if(st->Top==-1){
        printf("Stack Underflow");
    }else{
        x=st->S[st->Top];
        st->Top--;
    }
    return x;
}

Time taken for both psuhing and popping is O(1)

3. peek(index)

It finds an element at a given index
Always remember that the top element is the first element. Hence index at the top indx is 0. This is different from the indices in the array, as we can see.
Lets derive a formula for this:

Pos         Index=Top-pos+1 
1               3=3-1+1
2               2=3-2+1
3               1=3-3+1
4               0=3-4+1

code:
int peek(Stack st,int pos){
    //first check if position is valid or not
    x=-1
    if(st.Top-pos+1<0){
        printf("Invalid Posn");
    }else{
        x=st.S[st.Top-pos+1];
    }
    return x;
}

Time taken here is also constant, O(1)

4. stackTop() - lets us know the topmost value of the stack
code:

int stackTop(stack st){
    if(st.Top==-1){
        return -1;
    }else{
        return st.S[st.Top];
    }
}

5. isEmpty() - checks if the stack is empty or not

int isEmpty(stack st){
    if(st.Top==-1){
        return 1;
    }else{
        return 0;
    }
}

6. isFull() - checks if the stack is full or not

int isFull(stack st){
    if(st.Top==st.size-1){
        return 1;
    }else{
        return 0;
    }
}


all these operations take O(1) time



-----implementation of stacks using linked lists-----

struct Node{
    int data;
    struct Node* next;
};

In a linked list, the insertion or deletion from the end takes O(n) time, and from the head position it takes O(1) time
Hence here, the top will always be at the head Posn

when we push an element, it will be same as insertion of elements at head
when we pop an element, it will be same as deletion of elements at head
both processes take O(1) time

If Top==NULL, then stack is Empty, since there are no nodes

how to check if stack is full?
if we create a new node, and it doesnt get created, the heap is full, hence the stack is full

Node *t = new Node;
if(t==NULL){
    stack is full
}

1. Push():

code:
void push(int x){
    Node *t=new Node;
    if(t==NULL){
        printf("Stack overflow");
    }else{
        t->data=x;
        t->next=Top;
        Top=t;
    }
}


2. pop():

code:
int pop(){
    int x=-1;
    if(top==NULL){
        printf("Stack is empty");
    }else{
        p=Top;
        Top=Top->next;
        x=p->data;
        free(p);
    }
    return x;
}

3. peek(index)

we will need to return a value at a specific position
here we will need to traverse the linked list to reach the specific position or until it bcms NULL
hence this function takes time O(n)

code:
int peek(int pos){
    int x=-1,i;
    Node *p=Top;
    for(i=0;p!=NULL && i<pos-1;i++){
        p=p->next;
    }
    if(p!=NULL){
        return p->data;
    }else{
        return -1;
    }
}

4. isEmpty(): 
code:

int isEmpty(){
    return Top? 0 : 1;
}

5. isFull():

code:
int isFull(){
    Node *t=new Node;
    int r=t?0:1;
    return r;
}



-------APPLICATIONS OF STACKS--------

1. Parenthesis matching - we want to check tht for every opening bracket(Parenthesis), there must be a closing bracket

((a+b)*(c-d))
we sacn through the expression by scanning one charecter/symbol at a time
if it is a bracket(opening) we push it into a stack. All other charecters will be ignored (except closing brackets)

if we get a closing bracket, pop ONE symbol from the stack
after scanning through the entire expression, if the stack is empty, then the Parenthesis matching is true for the expression.

if we have something like (((a+b)*(c-d)) , we will see that one symbol will be left which will not get popped. hence the matching will fail here.

if there is an extra closing bracket like: ((a+b)*(c-d)))
after popping all the brackets, if there is any closing bracket left which is not matching, the isEmpty will return true, hence matching will fail

Note: This method only checks whether the expression has proper parenthesis matched or not. It does not depend on the fact that the expression is proper or not. For ex- in (a+)b(cd*) will pass the test bcz all parenthesis are matched

code:

int isBalance(char *exp){
    struct Stack st; // we will need to initialize the stack
    st.size=strlen(exp);  //we assume that the max number of brackets in the stack can be equal to the max number of charecters in the expression
    //so the stack can have max size equal to the size of expression
    st.top=-1;
    st.S=new char[st.size];
    int i;
    for(i=0;exp[i]!='\0';i++){
        if(exp[i]='(') push(&st,exp[i]);
        else if(exp[i]==')'){
            //we will need to check if the stack is empty or not
            //if the stack is empty, we return false, since the expression doesnt have matching of parenthesis
            if(isEmpty(st)) return false;
            pop(&st);
        }
    }
    return isEmpty(st)? true:false; //checking if anything is left in the stack or not, if there is symbols left, we return false
}



Student excercises:
1. lets take an expression with all types of brackets

This is same as paranthesis matching, but here, while popping, we will need to check if the closing bracket is a pair for the opening bracket of the same kind,ie, sq bracket closing for sq bracket opening, etc

in case the brackets dont match, for ex:
{([a+b)*[c-d])/e} here the opening sq bracket doesnt have its closing pair, we will need to check such cases and then handle them. 


if(exp[i]=='{' || exp[i]=='(' || exp[i]=='['){
    push(st,exp[i]);
}
if(exp[i]=='}' || exp[i]==')' || exp[i]==']'){
    x=pop(st);
}

ASCII codes for the braces are:

40 ), 41 (
91 ], 93   [
123 }, 125  {



---------Infix, Postfix and Prefix Conversion----------

we have 3 notations to represent expressions in Computer Science

1. Infix: operand operater operand
eg : a+b

2. prefix: operator operand operand
eg : +ab

3. Postfix: operand operand operator
eg : ab+

lets say we have a infix expression:
8+3*(9-6)/2^2+6/2

this is an infix operation, we will follow BODMAS to find the answer to this expression

in the infix expression, we will need to find out which of the operations will happen first according to BODMAS. For doing that we need to scan the entire exp to find out the operation with highest preference, that too multiple times, this takes up a lot of time. 
To prevent this from happening, we can use either prefix or postfix expression

the postfix form of the above expression is : 8 3 9 6 - 2^2 / * + 6 2 / +

Now we can operate on the expression in just one scan, with BODMAS.

The postfix form arranges the expression in the proper BODMAS priority and it helps us to solve the expression in just one scan

precedence of some operators:
symbol      precedence
+,-             1
*,/             2
()              3

3 means highest priority

Always use paranthesis wherever possible, and in case the paranthesis is missing, the compiler automatically paranthesises it logically using precedence and associativity

1. a+b*c 
here * has highest precedence, hence b*c has highest precedence
so the expression will become -> (a+(b*c))
prefix: 
first convert the innermost paranthesis first
(a+(b*c))
step1: (a+[*bc])
step2: +a*bc 
hence prefix form is : +a*bc

postfix:
step1: (a+[bc*])
step2: abc*+


2. a+b+c*d 

prefix:
step1: a+b+[*cd]
step2: [+ab]+[*cd]
step3: ++ab*cd

postfix: 
step1: a+b+[cd*]
step2: [ab+]+[cd*]
step3: ab+cd*+

3. (a+b)*(c-d)
prefix:
step1: [+ab]*(c-d)
step2: [+ab]*[-cd]
step3: *+ab-cd

postfix:
step1: [ab+]*(c-d)
step2: [ab+]*[cd-]
step3: ab+cd-*


---associativity and unary operators---

symbol      precedence      associativity
+,-             1               l-r
*,/             2               l-r 
^               3               r-l
unary           4               r-l
()              5               l-r


a+b+c-d here the precedence are equal, here the associativity will determine how the paranthesisation is done. 
the expression becomes: (((a+b)+c)-d) since associativity here is L->R

the expression a=b=c=5 becomes:
(a=(b=(c=5))) since the associativity here is R->L

unary operators and their precendence 
1. -a
prefix: -a
postfix: a-

2. *p 
prefix: *p
postfix: p*

3. n!
prefix: !n
postfix: n!

4. log n
prefix: log n
postfix: n log


exp- -a+b*log n!
step1: -a+b*log[n!]
step2: -a+b*[n!log]
step3: [a-]+b*[n!log]
step4: [a-]+[bn!log*]
step5: abn!log*+


How to convert from Infix to Postfix using stacks:

exp:  a+b*c-d/e
we take a stack, and a strong for postfix expression

when we see an operator, we push it into the stack, and all other charecters are added to the string. While scanning, when we come across a symbol which is having a greater precedence than the symbol at the top of the stack, we push it. If precedence is smaller than/equal to the topmost symbol, we pop the symbol 

postfix:  abc*+de/-

the method was like this:

sym         stack       postfix
a            ---            a
+             +             a
b             +            ab
*             *,*          ab
C             *,+          abc
-              -           abc*+
d              -           abc*+d
/              /,-          abc*+d
e              /,-          abc*+de
                            abc*+de/-
END


we can repeat the entire process above without making a string with charecters other than symbols by assigning the highest precedence order to the charecters(a,b,c....)


code to convert infix to postfix:

//for checking if it is a operand or not 
int isOperand(char x){
    if(x=='+' || x=='-' || x=='*' || x=='/'){
        return 0;
    }else{
        return 1;
    }
}
//for precedence
int pre(char x){
    if(x=='+' || x=='-') return 1;
    else if(x=='*' || x=='/') return 2;
    return 0;
}
char *convert(char *infix){
    struct Stack st;  //initialized
    char *postfix = new char[strlen(infix)+1];
    int i=0,j=0;
    while(infix[i]!='\0'){
        if(isOperand(infix[i])){
            postfix[j++]=infix[i++];
        }else{
            if(pre(infix[i])>pre(stackTop(st))){
                push(&st,infix[i++]);
            }else{
                postfix[j++]=pop(&st);
            }
        }
    }
    while(!isEmpty(st)){
        postfix[j++]=pop(&st);
    }
    postfix[j]='\0';
    return postfix;
}



expression:  ((a+b)*c)-d^e^f
step1: ([ab+]*c)-d^e^f
step2: [ab+c*]-d^[ef^]
step3: [ab+c*]-[def^^]
step4: ab+c*def^^-

symbol          out stack precedence            in stock precedence
+,-                     1                               2
*,/                     3                               4
^                       6                               5
(                       7                               0
)                       0                               ?


here the precedence for parenthesis is lowest, hence they are pushed at the bottom of the list. If a closing bracket match for an opening bracket is found, we pop out both the braces and dont add it to the postfix string 


Evaluating a postfix expression
3*5+6/2-4
result of the above expression is 14

postfix of the above expression is: 35*62/+4-

we take a stack, and we scan through the postfix exp one charecter at a time

first we push 3 into the stack, then 5...when we encounter *, we pop both and perform the operation on both the numbers
then we push the result,15 into the stack 

then when we push 6,2 into the stack, then come across /
we perform 6/2 and push the resultie,3 into the stack 
then we encounter a +, so we perform addition btwn 15 and 3, then push the result again into the stack
same for 4 and -

sym             stack               operations
3                  3
5                 5,3
*                  15                   5*3
6                 6,15
2                 2,6,15
/                  3,15                 6/2
+                   18                  15+3
4                   4,18                  
-                    14                 14

END


if our expression is like this:
x = 6+5+3*4
postfix exp is: x 6 5 + 3 4 * + =

we solve it in the same way as the above expression


code for Evaluating a postfix exp:
note: the expression is in sring format, so we will need to convert each charecter into their proper symbol using ASCII code
when we push the number, we subtract ascii code of 0,ie,48 from the charecter
and make the stack type as int 

int Eval(char *postfix){
    struct Stack st; //initialize
    int i,x1,x2,r;
    for(i=0;postfix[i]!='\0';i++){
        if(isOperand(postfix[i])){
            push(&st,postfix[i]-'0');
        }else{
            x2=pop(&st);
            x1=pop(&st);
            switch(postfix[i]){
                case '+': r=x1+x2;
                          push(&st,r);
                          break;

                case '-': r=x1-x2;
                          push(&st,r); 
                          break;

                case '*': r=x1*x2;
                          push(&st,r); 
                          break;

                case '/': r=x1/x2;
                          push(&st,r); 
                          break;
            }
        }
    }
    return pop(&st);
}