Some problems on recursion
lec 61

1> Sum of first n natural numbers

1+2+3+4+5+6....+n

sum(n)=1+2+3+4+...+(n-1)+n
=>sum(n)=sum(n-1)+n

therefore, sum(n) = 0,  for n=0
                  = sum(n-1)+n,  for n>0

int sum(int n){
    if(n==0){
        return 0;
    }else{
        return sum(n-1)+n;
    }
}

direct formula for sum of n terms is : n(n+1)/2
it is preferrable to use this formula since recursion will take time and also space, both O(n), where as the formula will take O(1) time and space

we can do it using loop as well
int sum(int n){
    int i,s=0;
    for(i=1;i<=n;i++){
        s=s+i;
    }
    return s;
}

this takes O(n) order of time but only O(1) space

lec 63

2> Factorial of a number
n!=1*2*3*4*....*n

remember 0!=1 and 1!=1 as well

fact(n)=1*2*3*....*(n-1)*n
=> fact(n) = fact(n-1)*n

so, fact(n)= fact(n-1)*n, for n>0
           = 1, for n=0

int fact(int n){
    if(n==0){
        return 1;
    }else{
        return fact(n-1)*n;
    }
}

the analysis of space and time is the same as that of the sum of n natural numbers...ie, O(n)

similarly if we use for loop, the space will be O(1) and time is O(1)

if we try to pass a negative number, the recursion will happen for an infinite number of times until stack overflow occurs and the program is stopped


lec 65
3> Exponent (m)^n

2^5=2*2*2*2*2

so, m^n = m*m*m*m.....(for n times)

pow(m,n)=m*m*m*....(for n-1 times)*m
=> pow(m,n)=pow(m,n-1)*m

pow(m,n)= 1, n=0
        = pow(m,n-1)*m, for n>0

int pow(int m,int n){
    if(n==0){
        return 1;
    }
    return pow(m,n-1)*m;
}

the time and space is order of O(n)

lets see :
2^8=(2*2)^4
2^9=2*(2*2)^4

we can see that if we multiply the number by itself then the power reduces by half, we can use this observation to make recursion smaller

int pow(int m,int n){
    if(n==0){
        return 1;
    }
    if(n%2==0){
        return pow(m*m,n/2);
    }else{
        return m*pow(m*m,(n-1)/2);
    }
}

this reduces the time complexity to O(log n)
we can also write this using loops

lec 67

4> for taylor series

e^x=1+(x/1)+(x^2/2!)+(x^3/3!)+....n terms

sum(n)=1+2+3+...n
so, pow(m,n) = m*m*m*m.....(for n times
fact(n)=1*2*3*....*(n-1)*n

this is like a implementation of both sum and factorial and exponent using recursion
so a function for taylor series has to do 3 calculations but return only one value
to implement this we will need to use static variables

int e(int x,int n){
    static int p=1,f=1;
    int r;
    if(n==0){
        return 0;
    }else{
        r=e(x,n-1);
        p=p*x;
        f=f*n;
        return r+p/f;
    }
}

another approach for finding Taylor series:

e^x=1+(x/1)+(x^2/2!)+(x^3/3!)+....n terms

    0   0   (x*x/1*2) (x*x*x/1*2*3) .....

    we can see the number of multiplications is n^2 for the entire series


now if we use Horner's rule for Taylor series

e^x=1+(x/1)+(x^2/1*2)+(x^3/1*2*3)+(x^4/1*2*3*4)
if we take x/1 common

e^x=1+x/1[1+(x/2)+(x^2/2*3)+(x^3/2*3*4)]

e^x=1+x/1[1+(1+x/2)[(x/3)+(x^2/3*4)]

e^x=1+x/1[1+(1+x/2)[1+(x/3)[(1+x/4)]]]

we can now see that the number of recursions went down to n times
so the Time complexity is now O(n) instead of O(n^2)

here is an implication using loops
int e(int x,int n){
    int s=1;
    for(n>0;n--){
        s=s1+x/n*s;
    }
    return s;
}

we can do recursion using static variables too

int e(int x,int n){
    static int s=1;
    if(n==0){
        return s;
    }
    s=1+x/n*s;
    return e(x,n-1);
}