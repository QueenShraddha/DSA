Strings

lec 131

Charecter set - It is a set of charecters supported by a language
We know that a computer system works on binary numbers
SO they cant access charecters directly
so we assign different numbers to these charecters and this set is followed by every electronic mchine

for english alphabets we use ASCII code (American Standard Code for Information Interchange)
It is made by ANSI and is ISO Standard

for different languages,like Hindi, Japanese and etc we have other ISO Standard and they are called Unicodes

ASCII codes:
A-Z are represented by 65-90
a-z are represented by 97-122
0-9 are represented by 48-57
there are ascii codes for spcl charecters like (),*,-,+....

Escape: 27
Enter: 10
Space : 13

So all ascii codes are represented by numbers from 0 to 127
every charecter here can be represented in max 7 bits in memory
in RAM they are allocated 1 byte(8 bits)

Unicode is a superset of all different charecters in all international languages, hence ASCII code is a subset of Unicode
They are represented in 4x4 bits(2 bytes) of Hexadecimal values

go to Unicode.org to find out different unicodes 


How to declare a charecter type array or a string in C/C++

char temp; //it is one single charecter variable, it takes only 1 byte of memory
They are represented in single quotes ''

temp='A';
or temp='B'

but temp = 'AB' is wrong
just one charecter can be used

to print or scanf, we use %c as a format specifier 
printf("%c",temp);
in C++, we can just use cout<<temp; or cin>>temp;

Array of charecters
char X[5]; //declares an array of 5 charecters
char X[5]={'A','B','C','D','E'}; //declare and init together
char X[]={'A','B','C','D','E'}; //declare and init together without mentioning the size

or we can create the same array with this:
char X[]={65,66,67,68,69};

char X[5]={'A','B'};
initialises the first 2 char as A and B and others with 0


string is nothing but a set/array of charecters
if we declare a name like this:
char name[10]={'J','O','H','N'};

here the length of the array is 10
but the string length is 4 only
where does the string end then?
the point where string ends is marked with a null charecter or '\0'
this is called a string delimiter or a EOF
also called string terminator

This is only for C/C++
in Java we dont have an EOF

hence the array is like this :
char name[10]={'J','O','H','N','\0'};
char name[]={'J','O','H','N','\0'}; //here the size isnt mentioned so the array is of 5 memory bytes only since \0 also takes up Space

we can also declare a string as this:
char name[10]="John";

in C,
to print a string:
printf("%s",name); //%s is used to print a name
to scan a string:
scanf("%s",name);  //remember we dont use & here

in C++
cin>>name;
cout<<name;

there is a problem in scanf reading, which is, if the string we need to enter has multiple words, say "Taj Mahal", scanf will stop taking in any input once it gets a Space
to avoid this we use gets() function

gets(name);


length of a string:
length means finding the length of charecters in the array
say:
S={'w','e','l','c','o','m','e','\0'}
we have to scan through this array until we reach \0
once we reach \0, we get the string

code:
int main(){
    char S[]="welcome";
    int i;
    for(i=0;S[i]!='\0',i++){} //counts the length in i
    printf("length is %d",i);
    return 0;    
}


how to change the case of a String:,ie, from upper case to lower case or vice versa

we know that A-Z -> 65-90
and a-z -> 97-122

we can see that for the same alphabet, the difference btwn the values of the upper case and lower case letters is 32
a-A=97-65=32 

so if we add 32 to a upper case letter, we get a lower case
so if we subtract 32 to a lower case letter, we get a upperr case

int main(){
    char A[]="WELCOME";
    int i;
    for(i=0;A[i]!='\0';i++){
        A[i]=A[i]+32;
    }
    printf("New string is: %s",A);
}

if a string has both kinds of cases, and we need to change both the cases to the opposite,ie, toggle them we will do this by:

char A[]="wElCome";
int i;
for(i=0;A[i]!='\0',i++){
    if(A[i]>=65 && A[i]<90){
        A[i]+=32;
    }else if(A[i]>='a' && A[i]<=122){
        A[i]-=32;
    }
}


counting vowels and consonants in a string

int main(){
    char A[]="How are you";
    int i,vcount=0,ccount=0;
    for(i=0;A[i]!='\0';i++){
        if(A[i]=='a' || A[i]=='e'....||A[i]=='A' || A[i]=='E'...){
            vcount++;
        }else if((A[i]>=65 && A[i]<=90)||(A[i]>=97 && A[i]<=122)){
            ccount++;
        }
    }
    cout<<"Number of vowels is: "<<vcount;
    cout<<"Number of consonants is: "<<ccount;
}


for counting number of words
here we will just count the number of spaces
number of words =  number of spaces+1

int main(){
    char A[]="How are you";
    int i,word=0;
    for(i=0;A[i]!='\0';i++){
        if(A[i]==' '){
            word++;
        }
    }
    printf("%d",word+1);
}

if there are countinuous spaces(more than one space), it is called a whitespace
if this occurs, our count of words can be manipulated
to resolve this problem, we use this code:

int main(){
    char A[]="How are you";
    int i,word=0;
    for(i=0;A[i]!='\0';i++){
        if(A[i]==' ' && A[i-1]!=' '){
            word++;
        }
    }
    printf("%d",word+1);
}


how to validate a string(check if the string is valid or not)
for example in passwords or id names, there are only alphabets or numbers are allowed and no other charecters are allowed

to implement this, we will scan through the entire string and check if all charecters are valid or not

int main(){
    char *name="Ani?321";
    if(valid(name)){
        pf("valid string");
    }else{
        pf("invalid string");
    }
}

int valid(char *name){
    int i;
    for(i=0;name[i]!='\0';i++){
        if(!(name[i]>=65 && name[i]<=90) && !(name[i]>=97 && name[i]<=122) && !(name[i]>=48 && name[i]<=57)){
            return 0;
        }
    }
    return 1;
}


reversing a string:
there are different methods to reverse a string

first method: copying a string backwards into another charecter array

first we find the last index of the string
then use a j to loop through B from the last
remember after copying all charecters from A to B, we hae to assign B[j] with '\0' inorder to make it a string

int main(){
    char A[]="python";
    char B[7];
    int i,j;
    for(i=0;A[i]!='\0';i++){}
    i=i-1;
    for(j=0;i>=0;i--,j++){
        B[j]=A[i];
    }
    B[j]='\0';
    printf("%s",B);
}


method 2:
swapping charecters in the same string 

int main(){
    char A[]="python";
    char t;
    int i,j;
    for(j=0;A[j]!='\0';j++){} //loop to find the end of the string
    j=j-1;
    for(j=0;i<j;i++,j--){
        t=A[i];
        A[i]=A[j];
        A[j]=t;
    }
    printf("%s",A);
}


comparing 2 strings and check if a string is palindrome or not
to check 2 strings are similar or not, we will loop through both strings and check every chareter is similar or not

if any charecter doesnt match, the strings are not equal

using this method we can also find the rank of the words in a dictionary
-> if a string is longer than the other, it ranks lower
-> check rank using the alphabet

if both the strings have different cases in different places, we wont be able to compare the strings properly, so we must convert both strings to upper case or lower case

int main(){
    char A[]="Painter";
    char B[]="Painting";

    for(i=0,j=0;A[i]!='\0' && B[i]!='\0';i++,j++){
        if(A[i]!=B[j]){ break; }
    }
    if(A[i]==B[i]) pf("equal");
    else if(A[i]<B[i]) pf("ranks lower");
    else pf("Ranks higher");  
}

a string is called palindrome if the reverse of the string is equal to the string itself
like: 'madam','azza',etc

to check for palindrome, first we reverse copy a string into another char array, and then compare them

int main(){
    char A[]="madam";
    char B[6];
    //first reverse copy into B
    int i,j;
    for(i=0;A[i]!='\0';i++){}
    i=i-1;
    for(j=0;i>=0;i--,j++){
        B[j]=A[i];
    }
    B[j]='\0';

    //then we compare the charecters
    //if the strings are same,they are palindrome otherwise not
}


finding duplicates in a string

there are 3 methods to finding duplicates:
1. comparing with other letters
2. using hash table
3. using bits

the first method is more or same as finding duplicates in a numerical array
check the notes for that topic and change the code as reqd

using hash tables:
for hashing we will use ascii codes of the charecters
we know a-z => 97-122
122 is the max ascii code possible
but then we will need to make a large array with 122 elements
but rather, what we will do is: we represent 'a' or 97 as 0th index
and 122 or 'z' as the 25th index
hence the hash table is only 26 elements large
indices can be obtained by subtracting 97 from the charecter
this helps us to reduce the size of the hash table
now we follow the procedure of hashing as we used to do 
for every element encountered for one or more times in the scanning of the array, we increase the value of that charecter in the hash tbale  by 1

int main(){
    char A[]="finding";
    int H[26],i;
    for(i=0;A[i]!='\0';i++){
        H[A[i]-97]+=1;
    }
    for(i=0;i<26;i++){
        if(H[i]>1){
            printf("%c occurs %d times",i+97,H[i]);
        }
    }
}

this is a code for just lower case charecters, if we need to make a code for upper case and other charecters too, we will need to increase the hash table size 


method 3:
using bits

we must know bitwise operations for this

binary number system for charecters uses 7 bits for representation,ie, 7 bits - 0000000

each bit is a muliple of 2 starting from 1(at the rightmost,called LSB) till 128 (at the left, called MSB)

if we have char H=1;
then binary form is 0000001

if char H=4, binary form is 0000100
if char = 6, we have binary form as 0000110
so on

left shift operator shifts all the bits by specified number of bits
if char H=1, it 0000001
then H=H>>5 will make it 0010000
H>>2 will make it 00000100

binary and (&) or(|) operate on each binary digit singularly
1 & 1=1
1|1 = 1
0 & 1 = 1 & 0 = 0
0|0 = 0
0 | 1 = 1 | 0 = 1
0&0 = 0

if we use both left shift and right shift in order to know which bit is on(1) or off(0), we use both left shift operator and bitwise and and or
this method of checking is called masking

like for example, we have a=1 and H=32=>0010000
and if we do a=a>>2, a becomes=> 0000100
now doing H&a we get ans as 0000000
and we keep checking a&H for every shift of bit in a, this will tell us which bits are off and which are on
this method is called masking

merging is when we set a bit to on or off
we can do this using | operator


now to find a duplicate in a string, we take example of a string as A[]="finding"

for hashtable, we take a long int variable
a long in variable has 4 bytes in it
4 bytes means 32 bits, now we can accomodate every bit of 26 letters of the lower case in it when we use the hash table

int main(){
    char A[]="finding";
    long int H=0,x=0;
    for(int i=0;A[i]!='\0';i++){
        x=1;
        x=x<<A[i]-97; //left shift x by the charecter bits for masking
        if(x&&H>0)//masking
        {
            printf("%c is duplicate",A[i]);
        }else{
            H=x|H; //merging here to set the bit to ON, if it isnt ON already
        }
    }
}



checking if 2 strings are anagrams or not
anagrams are strings which are formed by the same set of alphabets
like: medical and decimal
how to check?
first we check if the strings arent of equal sizes, if they arent, then they arent anagrams

then, one process if that we take every letter in string1 and check them with all letters in string2 to find if they are present or not
the time complexity here is O(n^2) bcz we are using a nested loop tp check each letter of string1 with all letters of string2 repeatedly

we can also use hash table in order to find if the strings are anagrams or not
(this code is for lower case strings only)

we take a hash table of 26 size and for each letter in the string1 we increment its coressponding index(ascii value-97) in the hash table by 1
if any duplicates are present we just increment the coressponding letter index by 1 again

now we loop through string2, and now for every corresponding value in the hash table, we decrement the index value(ascii value - 97) by 1

now, we will see that if any letter is present in string2 but not in string1 then it will become -1
hence if we come across any such index with -1 as value, we can say that the strings are not anagrams

int main(){
    char A[]="decimal";
    char B[]="medical";
    int i,H[26]={0};
    for(i=0;A[i]!='\0';i++){
        H[A[i]-97]+=1;
    }
    for(i=0;B[i]!='\0';i++){
        H[A[i]-97]-=1;
        if(H[A[i]-97]<0){
            printf("Not anagrams");
            break;
        }
    }
}

time complexity here is O(n)

if there are no duplicate letters present, we can also use bitset method that we used in the last problem


Permuatations of a string:
say S="ABC"
then the Permuatations of S are:
ABC,ACB,BAC,BCA,CAB,CBA
hence for 3 lettered string, the number of permuatations is 3!
hence for n lettered string, the number of permuatations is n!

see state space tree in copy
the method used to achieve all the possible permuatations is called backtracking and is implemented using recursion
Brute force means the finding of all possible permuatations of a given string
backtracking is a method to achieve Brute force

code:

void perm(char S[],int k){
    static int A[10]={0};
    static char Res[10];
    int i;
    if(S[k]=='\0'){
        Res[k]='\0';
        printf("%s",Res);
    }else{
    for(i=0;S[i]!='\0';i++){
        if(A[i]==0){
            Res[k]=S[i];
            A[i]=1;
            perm(s,k+1);
            A[i]=0; //making A[i] once permuatations for a specific child is complete            
        }
    }
    }
}

method 2 to generate permuatations of a string
this procedure uses swapping of the letters

S="ABC\0"

take first index as l, l=0
last index as h, h=2

void perm(char S[],int l,int h){
    int i;
    if(l==h){
        pf(s);
    }
    else{
    for(i=l;i<=h;i++){
        swap(s[l],s[i]);
        perm(s,l+1,h);
        swap(s,l+1,h);
    }
    }
}